<Set Up>
git config --global user.name "Your Name"
git config --global user.email "youremail@example.com"

<Repository Initialization>
git init
git clone <repository-url>

<Branch Management>
git branch <branch-name> (branch 만들기)
git branch -d <branch-name> (branch 삭제하기)
git branch (branch 목록 보기)
git checkout <branch-name> (다른 branch로 전환하기)

<Basic Workflow Commands>
*참고
origin/main -> github에 올라가있는 버전의 main이라는 이름의 branch
그냥 main -> 내 컴퓨터(로컬 환경)에 저장되어있는 버전의 main이라는 이름의 branch

1. 내 컴퓨터의 branch를 github에 올라가있는 branch(origin branch)와 같아지게 업데이트 시켜주기
git fetch (github에서 로컬 컴퓨터로 변경사항 가져오기)
git pull origin <branch-name> (github에 올라가있는 branch에 변경사항 가져오기: 예: git pull main -> origin/main의 변경사항이 main에 반영되어 origin/main과 main이 같아진다)

2. 코딩 작업 후 내가 변경한 내용을 commit, push해서 github에 올라가있는 branch(origin branch)에 반영하기
git status (현재 내가 위치해있는 로컬 branch에서 어떤 변경사항이 staged되어있는지 확인)

git add <file-name> (특정한 파일을 stage시킴)
git add . (현재 디렉토리의 모든 파일을 stage시킴)

git commit -m "Commit Message" (새로운 버전 만들기. 아직 github에 올라간 것은 아님.)
git commit -m "Commit 제목" -m "Commit 설명" (-m을 이렇게 두 번 쓰면 세부설명도 작성 가능)

git push origin <branch-name> (내 컴퓨터에의 branch에서 만든 새로운 버전을 github에 올라가있는 branch(origin branch)에 반영하기. 인터넷에 올리기.)

<Merging and Rebasing>
git merge <branch-name> (다른 branch를 현재 위치한 branch로 합치기)
git merge --squash develop (다른 branch를 현재 위치한 branch로 합치기: merge commit 1개만 생성)
git rebase <branch-name> (똑같이 branch를 합치는 건데 과거 기억이 없어짐?? 좀 다름. 잘 모름..)

<Undo Changes>
뒤로가기는 정확한 코드는 일단 지피티한테 물어보도록 하자
git reset <file-name> (unstage a file)
git checkout -- <file-name> (restore last commit)
